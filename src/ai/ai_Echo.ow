rule("AI Echo")
{
	event
	{
		Subroutine;
		aiSub_Abilities_Echo;
	}

	actions
	{
		Event Player.ai_IsInAbilitySub = True;
		Call Subroutine(aiSub_ReactionDelay);
		If(Event Player.ai_AbilityButton == Button(Primary Fire));
			If(Event Player.ai_AimType != 1 || Event Player.ai_AimBase != 0);
				Event Player.ai_AimType = 1;
				Event Player.ai_AimBase = 0;
				Call Subroutine(aiSub_FacingStart);
			End;
			Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[0];
			Skip If(Is Button Held(Event Player, Button(Primary Fire)), 2);
			Call Subroutine(aiSub_ButtonsReset);
			Start Holding Button(Event Player, Button(Primary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Secondary Fire));
			Call Subroutine(aiSub_ButtonsReset);
			If(Event Player.ai_AimType != 1 || Event Player.ai_AimBase != 3);
				Event Player.ai_AimType = 1;
				Event Player.ai_AimBase = 3;
				Event Player.ai_FacingRelPosMod = Vector(0, 0.350, 0);
				Call Subroutine(aiSub_FacingStart);
			End;
			Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[1];
			Press Button(Event Player, Button(Secondary Fire));
			Wait(1, Ignore Condition);
		Else If(Event Player.ai_AbilityButton == Button(Ability 1));
			Press Button(Event Player, Button(Ability 1));
		Else If(Event Player.ai_AbilityButton == Button(Ability 2));
			If(Event Player.ai_AimType != 0 || Event Player.ai_AimBase != 0);
				Event Player.ai_AimType = 0;
				Event Player.ai_AimBase = 0;
				Call Subroutine(aiSub_FacingStart);
			End;
			Press Button(Event Player, Button(Ability 2));
			Wait Until(Is Using Ability 2(Event Player), 0.250);
			Wait Until(Is Using Ability 2(Event Player) == False, 2.500);
		Else If(Event Player.ai_AbilityButton == Button(Ultimate));
			Press Button(Event Player, Button(Ultimate));
			Wait Until(Is Using Ultimate(Event Player), 0.250);
		End;
		Event Player.ai_IsInAbilitySub = False;
	}
}

rule("AI Echo General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.ai_AIEnabled == True;
	}

	actions
	{
		Event Player.ai_OptimalDistanceDefault = Random Real(9, 13);
		Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
		Event Player.ai_AimBaseDefault = 0;
		Event Player.ai_AimTypeDefault = 1;
		Event Player.ai_ProjectileSpeeds[0] = 75;
		Event Player.ai_ProjectileSpeeds[1] = 50;
		Call Subroutine(aiSub_FacingReset);
		Event Player.ai_HeroInitialized = True;
	}
}

rule("AI Echo Glide")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Is Alive(Event Player) == True;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Jump));
		Wait Until(Is In Air(Event Player) == False, 30);
		Stop Holding Button(Event Player, Button(Jump));
	}
}

rule("AI Echo Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 35;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15 + Event Player.ai_ViewAngleMod) == True;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Primary Fire);
		Call Subroutine(aiSub_Abilities_Echo);
		Wait(0.330, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("AI Echo Flight")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 1);
		Call Subroutine(aiSub_Abilities_Echo);
	}
}

rule("AI Echo Focusing Beam")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) <= Max Health(Players In Slot(Slot Of(Event Player), Team 1)) / 2;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= Max Health(Players In Slot(Slot Of(Event Player), Team 1)) / 4;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 16;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 2);
		Call Subroutine(aiSub_Abilities_Echo);
	}
}

rule("AI Echo Sticky Bombs")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= Max Health(Players In Slot(Slot Of(Event Player), Team 1)) / 2;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Secondary Fire);
		Call Subroutine(aiSub_Abilities_Echo);
	}
}

disabled rule("AI Echo Duplicate")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Echo;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Using Ultimate(Event Player) == False;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.250 + Y Component Of(
			Eye Position(Event Player)), 0), 10) == True;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ultimate);
		Call Subroutine(aiSub_Abilities_Echo);
	}
}


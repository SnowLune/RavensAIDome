rule("AI Ashe")
{
	event
	{
		Subroutine;
		aiSub_Abilities_Ashe;
	}

	actions
	{
		Event Player.ai_IsInAbilitySub = True;
		Call Subroutine(aiSub_ReactionDelay);
		If(Event Player.ai_AbilityButton == Button(Primary Fire));
			If(Event Player.ai_AimType != 0 || Event Player.ai_AimBase != 0);
				Event Player.ai_AimType = 0;
				Event Player.ai_AimBase = 0;
				Call Subroutine(aiSub_FacingStart);
			End;
			Press Button(Event Player, Button(Primary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Secondary Fire));
			If(Is Button Held(Event Player, Button(Secondary Fire)));
				Stop Holding Button(Event Player, Button(Secondary Fire));
			Else;
				Start Holding Button(Event Player, Button(Secondary Fire));
				Wait(0.250, Ignore Condition);
			End;
		Else If(Event Player.ai_AbilityButton == Button(Reload));
			Call Subroutine(aiSub_ButtonsReset);
			Press Button(Event Player, Button(Reload));
			Wait Until(Ammo(Event Player, 0) == Random Integer(8, Max Ammo(Event Player, 0)), 3.500);
		Else If(Event Player.ai_AbilityButton == Button(Ability 1));
			Press Button(Event Player, Button(Ability 1));
			Wait(0.100, Ignore Condition);
			Wait Until(Is Using Ability 1(Event Player) == False, 1);
		Else If(Event Player.ai_AbilityButton == Button(Ability 2));
			Event Player.ai_AimType = 2;
			Event Player.ai_AimBase = 2;
			Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[3];
			Event Player.ai_AimDistanceMod = 0;
			Call Subroutine(aiSub_FacingStart);
			Wait(Random Real(0.300, 0.400), Ignore Condition);
			Press Button(Event Player, Button(Ability 2));
			Wait(0.250, Ignore Condition);
			Call Subroutine(aiSub_FacingReset);
		Else If(Event Player.ai_AbilityButton == Button(Ultimate));
			Press Button(Event Player, Button(Ultimate));
			Wait(0.250, Ignore Condition);
		End;
		Event Player.ai_IsInAbilitySub = False;
	}
}

rule("AI Ashe General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.ai_AIEnabled == True;
	}

	actions
	{
		Event Player.ai_OptimalDistanceDefault = Random Real(15, 25);
		Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
		Event Player.ai_AimBaseDefault = 0;
		Event Player.ai_AimTypeDefault = 0;
		Event Player.ai_ProjectileSpeeds[3] = 25;
		Call Subroutine(aiSub_FacingReset);
		Event Player.ai_HeroInitialized = True;
	}
}

rule("AI Ashe Attack Scope In")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnAim == True;
		Event Player.ai_CnAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 7.500;
		Is Reloading(Event Player) == False;
		Is Firing Secondary(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Secondary Fire);
		Call Subroutine(aiSub_Abilities_Ashe);
	}
}

rule("AI Ashe Attack Scope Out")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnAim == True;
		Event Player.ai_CnAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 7.500;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Secondary Fire);
		Call Subroutine(aiSub_Abilities_Ashe);
	}
}

rule("AI Ashe Attack Scoped")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnAim == True;
		Event Player.ai_CnAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10 + Event Player.ai_ViewAngleMod) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 7.500;
		Is Reloading(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Primary Fire);
		Call Subroutine(aiSub_Abilities_Ashe);
		Wait(0.700, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("AI Ashe Attack Unscoped")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnAim == True;
		Event Player.ai_CnAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15 + Event Player.ai_ViewAngleMod) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 7.500;
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Primary Fire);
		Call Subroutine(aiSub_Abilities_Ashe);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Ashe Reload")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Ammo(Event Player, 0) == 0;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Reload);
		Call Subroutine(aiSub_Abilities_Ashe);
	}
}

rule("AI Ashe Reload After Kill")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Reload);
		Call Subroutine(aiSub_Abilities_Ashe);
	}
}

rule("AI Ashe Coach Gun Defensive")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 9.400;
		Health(Event Player) <= 125;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 1);
		Call Subroutine(aiSub_Abilities_Ashe);
	}
}

rule("AI Ashe Coach Gun Finishing")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 5;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) < 90;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 1);
		Call Subroutine(aiSub_Abilities_Ashe);
	}
}

rule("AI Ashe Dynamite")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnAim == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15 + Event Player.ai_ViewAngleMod) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Altitude Of(Players In Slot(Slot Of(Event Player), Team 1)) <= 2;
		Is Reloading(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 2);
		Call Subroutine(aiSub_Abilities_Ashe);
	}
}

rule("AI Ashe B.O.B.")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ashe;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10 + Event Player.ai_ViewAngleMod) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ultimate);
		Call Subroutine(aiSub_Abilities_Ashe);
	}
}


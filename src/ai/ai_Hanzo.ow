rule("AI Hanzo")
{
	event
	{
		Subroutine;
		aiSub_Abilities_Hanzo;
	}

	actions
	{
		Event Player.ai_IsInAbilitySub = True;
		Call Subroutine(aiSub_ReactionDelay);
		If(Event Player.ai_AbilityButton == Button(Primary Fire));
			If(Is Using Ability 2(Event Player));
				Press Button(Event Player, Button(Primary Fire));
			Else If(Is Button Held(Event Player, Button(Primary Fire)));
				Stop Holding Button(Event Player, Button(Primary Fire));
			Else;
				Start Holding Button(Event Player, Button(Primary Fire));
				Event Player.ai_WeaponChargeTime = Total Time Elapsed;
			End;
		Else If(Event Player.ai_AbilityButton == Button(Secondary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Ability 1));
			Press Button(Event Player, Button(Ability 1));
		Else If(Event Player.ai_AbilityButton == Button(Ability 2));
			Press Button(Event Player, Button(Ability 2));
		Else If(Event Player.ai_AbilityButton == Button(Ultimate));
			Press Button(Event Player, Button(Ultimate));
			Wait(0.900, Ignore Condition);
		End;
		Event Player.ai_IsInAbilitySub = False;
	}
}

rule("AI Hanzo General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.ai_AIEnabled == True;
	}

	actions
	{
		Event Player.ai_OptimalDistanceDefault = Random Real(15, 20);
		Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
		Event Player.ai_AimBaseDefault = 1;
		Event Player.ai_AimTypeDefault = 2;
		Event Player.ai_AimDistanceMod = -25;
		Event Player.ai_ProjectileSpeed = 110;
		Call Subroutine(aiSub_FacingReset);
		Event Player.ai_HeroInitialized = True;
	}
}



rule("AI Hanzo Lunge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
		Is In Air(Event Player) == True;
	}

	actions
	{
		If(Random Real(0, 1) < 0.600 + Event Player.ai_ChanceMod);
			Wait(Random Real(0.150, 0.250), Ignore Condition);
			Press Button(Event Player, Button(Jump));
		End;
	}
}

rule("AI Hanzo Attack Charge")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Using Ability 2(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
		Is Button Held(Event Player, Button(Primary Fire)) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Primary Fire);
		Call Subroutine(aiSub_Abilities_Hanzo);
	}
}

rule("AI Hanzo Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Using Ability 2(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.250 + Y Component Of(
			Eye Position(Event Player)), 0), 20) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Total Time Elapsed >= Event Player.ai_WeaponChargeTime + 1.250;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Primary Fire);
		Call Subroutine(aiSub_Abilities_Hanzo);
	}
}

rule("AI Hanzo Sonic Arrow")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 25;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 1);
		Call Subroutine(aiSub_Abilities_Hanzo);
	}
}

rule("AI Hanzo Storm Arrows Start")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.250 + Y Component Of(
			Eye Position(Event Player)), 0), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 2);
		Call Subroutine(aiSub_Abilities_Hanzo);
	}
}

rule("AI Hanzo Storm Arrows Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.250 + Y Component Of(
			Eye Position(Event Player)), 0), 12.500) == True;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Primary Fire);
		Call Subroutine(aiSub_Abilities_Hanzo);
		Wait(0.333, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("AI Hanzo Dragonstrike")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Hanzo;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Using Ability 2(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.250 + Y Component Of(
			Eye Position(Event Player)), 0), 12.500) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 10;
		Ultimate Charge Percent(Event Player) == 100;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ultimate);
		Call Subroutine(aiSub_Abilities_Hanzo);
	}
}
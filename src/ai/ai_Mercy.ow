rule("AI Mercy")
{
	event
	{
		Subroutine;
		aiSub_Abilities_Mercy;
	}

	actions
	{
		Event Player.ai_IsInAbilitySub = True;
		Call Subroutine(aiSub_ReactionDelay);
		If(Event Player.ai_AbilityButton == Button(Ultimate));
			Press Button(Event Player, Button(Ultimate));
			Wait Until(Is Using Ultimate(Event Player), 1);
			If(Is Using Ultimate(Event Player));
				Event Player.ai_OptimalDistance = Random Real(12, 16);
				Event Player.bot_MoveCrouchEnabled = False;
				Event Player.bot_MoveWASDEnabled = False;
				Event Player.ai_LookAtVector = Vector(X Component Of(Position Of(Event Player)), 10, Z Component Of(Position Of(Event Player)));
				Call Subroutine(aiSub_FacingLookAt);
				Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, Direction and Magnitude);
				Wait(Random Real(0.500, 1), Ignore Condition);
				Event Player.ai_CanAim = True;
				Start Throttle In Direction(Event Player, Backward, 1, To Player, Replace existing throttle, Direction and Magnitude);
				Wait(Random Real(0.500, 1), Ignore Condition);
				Event Player.bot_MoveWASDEnabled = True;
				Wait Until(Is Using Ultimate(Event Player) == False, 15);
				Event Player.bot_MoveCrouchEnabled = True;
				Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
			End;
		End;
		Event Player.ai_IsInAbilitySub = False;
	}
}

rule("AI Mercy General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.ai_AIEnabled == True;
	}

	actions
	{
		Event Player.ai_OptimalDistanceDefault = Random Real(8, 12);
		Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
		Event Player.ai_AimBaseDefault = 0;
		Event Player.ai_AimTypeDefault = 1;
		Event Player.ai_ProjectileSpeed = 50;
		Set Weapon(Event Player, 2);
		Call Subroutine(aiSub_FacingReset);
		Event Player.ai_HeroInitialized = True;
	}
}

rule("Non AI Mercy Wield Staff")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.ai_AIEnabled == False;
	}

	actions
	{
		Set Weapon(Event Player, 1);
	}
}

rule("AI Mercy Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanAttack == True;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.250 + Y Component Of(
			Eye Position(Event Player)), 0), 20) == True;
	}

	actions
	{
		Skip If(Is Button Held(Event Player, Button(Primary Fire)), 1);
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("AI Mercy Valkyrie")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Mercy;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ultimate);
		Call Subroutine(aiSub_Abilities_Mercy);
	}
}
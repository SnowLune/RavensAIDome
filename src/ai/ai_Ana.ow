rule("AI Ana")
{
	event
	{
		Subroutine;
		aiSub_Abilities_Ana;
	}

	actions
	{
		Event Player.ai_IsInAbilitySub = True;
		Call Subroutine(aiSub_ReactionDelay);
		If(Event Player.ai_AbilityButton == Button(Primary Fire));
			Skip If(Is Button Held(Event Player, Button(Primary Fire)), 1);
			Start Holding Button(Event Player, Button(Primary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Secondary Fire));
			If(Is Button Held(Event Player, Button(Secondary Fire)));
				Stop Holding Button(Event Player, Button(Secondary Fire));
				Call Subroutine(aiSub_FacingReset);
			Else;
				Event Player.bot_MoveJumpEnabled = False;
				Start Holding Button(Event Player, Button(Secondary Fire));
				Event Player.ai_AimType = 0;
				Event Player.ai_AimBase = 0;
				Call Subroutine(aiSub_FacingStart);
			End;
		Else If(Event Player.ai_AbilityButton == Button(Ability 1));
			Call Subroutine(aiSub_ButtonsReset);
			Event Player.ai_AimType = 1;
			Event Player.ai_AimBase = 0;
			Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[2];
			Call Subroutine(aiSub_FacingStart);
			Press Button(Event Player, Button(Ability 1));
			Wait(0.300, Ignore Condition);
			Call Subroutine(aiSub_FacingReset);
		Else If(Event Player.ai_AbilityButton == Button(Ability 2));
			Call Subroutine(aiSub_ButtonsReset);
			If(Event Player.ai_AbilityOpt == 0);
				Event Player.ai_AimType = 2;
				Event Player.ai_AimBase = 2;
				Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[3];
				Call Subroutine(aiSub_FacingStart);
				Wait(Random Real(0.300, 0.400), Ignore Condition);
				Press Button(Event Player, Button(Ability 2));
				Wait(0.250, Ignore Condition);
				Call Subroutine(aiSub_FacingReset);
			Else If(Event Player.ai_AbilityOpt == 1);
				Event Player.ai_LookAtVector = Position Of(Event Player) + World Vector Of(Vector(0, 0, 0.250), Event Player, Rotation);
				Call Subroutine(aiSub_FacingLookAt);
				Press Button(Event Player, Button(Ability 2));
				Wait(0.100, Ignore Condition);
				Event Player.ai_CanAim = True;
			End;
			Event Player.ai_AimType = 1;
		Else If(Event Player.ai_AbilityButton == Button(Ultimate));
			Press Button(Event Player, Button(Ultimate));
		End;
		Event Player.ai_IsInAbilitySub = False;
	}
}

rule("AI Ana General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.ai_AIEnabled == True;
	}

	actions
	{
		Event Player.ai_OptimalDistanceDefault = Random Real(15, 20);
		Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
		Event Player.ai_AimBaseDefault = 0;
		Event Player.ai_AimTypeDefault = 1;
		Event Player.ai_AimDistanceMod = -5;
		Event Player.ai_ProjectileSpeeds[0] = 125;
		Event Player.ai_ProjectileSpeeds[2] = 60;
		Event Player.ai_ProjectileSpeeds[3] = 30;
		Call Subroutine(aiSub_FacingReset);
		Event Player.ai_HeroInitialized = True;
	}
}

rule("AI Ana Scope In")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 12.500 + Event Player.ai_ViewAngleMod) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
		Has Status(Players In Slot(Slot Of(Event Player), Team 1), Asleep) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Secondary Fire);
		Call Subroutine(aiSub_Abilities_Ana);
	}
}

rule("AI Ana Scope Out")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 15;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Secondary Fire);
		Call Subroutine(aiSub_Abilities_Ana);
	}
}

rule("AI Ana Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10 + Event Player.ai_ViewAngleMod) == True;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Primary Fire);
		Call Subroutine(aiSub_Abilities_Ana);
		Wait(0.800, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("AI Ana Sleep Dart")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 5 + Event Player.ai_ViewAngleMod) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 1);
		Call Subroutine(aiSub_Abilities_Ana);
	}
}

rule("AI Ana Sleep Dart Face Enemy Asleep")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanAim == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Has Status(Players In Slot(Slot Of(Event Player), Team 1), Asleep) == True;
	}

	actions
	{
		Call Subroutine(aiSub_ReactionDelay);
		Event Player.ai_AimType = 1;
		Event Player.ai_AimBase = 3;
		Event Player.ai_FacingRelPosMod = Vector(0, 0.250, 0);
		Call Subroutine(aiSub_FacingStart);
		If(Ability Cooldown(Event Player, Button(Ability 2)) <= 4 && Ability Cooldown(Event Player, Button(Ability 2)) > 0);
			Event Player.ai_CanAttack = False;
			Wait Until(Ability Cooldown(Event Player, Button(Ability 2)) == 0, 4);
			Event Player.ai_CanAttack = True;
		End;
		Wait Until(Has Status(Players In Slot(Slot Of(Event Player), Team 1), Asleep) == False, 6);
		Call Subroutine(aiSub_FacingReset);
	}
}

rule("AI Ana Biotic Grenade")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 35;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 10 + Event Player.ai_ViewAngleMod) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Health(Event Player) > 100;
		Is On Ground(Event Player) == True;
		Altitude Of(Players In Slot(Slot Of(Event Player), Team 1)) <= 2;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 2);
		Event Player.ai_AbilityOpt = 0;
		Call Subroutine(aiSub_Abilities_Ana);
	}
}

rule("AI Ana Biotic Grenade Self")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Health(Event Player) <= 100;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 2);
		Event Player.ai_AbilityOpt = 1;
		Call Subroutine(aiSub_Abilities_Ana);
	}
}

rule("AI Ana Nano Boost")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Ana;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Event Player.ai_OptimalDistance;
		Ultimate Charge Percent(Event Player) == 100;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ultimate);
		Call Subroutine(aiSub_Abilities_Ana);
	}
}


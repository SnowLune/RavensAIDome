rule("AI Orisa")
{
   event
   {
      Subroutine;
      aiSub_Abilities_Orisa;
   }

   actions
   {
      Event Player.ai_IsInAbilitySub = True;
      Call Subroutine(aiSub_ReactionDelay);
      If(Event Player.ai_AbilityButton == Button(Secondary Fire));
         Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[1];
         Event Player.ai_AimBase = 3;
         Event Player.ai_FacingRelPosMod = Vector(Random Real(-2, 2), Random Real(3, 6), Random Real(-2, 2));
         Call Subroutine(aiSub_ReactionDelay);
         Press Button(Event Player, Button(Secondary Fire));
         Wait(0.100, Ignore Condition);
         Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[0];
         Event Player.ai_AimBase = 0;
         If(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 0.450 * Event Player.ai_ProjectileSpeeds[1]);
            Wait(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) / Event Player.ai_ProjectileSpeeds[1],
               Ignore Condition);
         Else;
            Wait(0.450, Ignore Condition);
         End;
         Press Button(Event Player, Button(Secondary Fire));
         Wait(0.500, Ignore Condition);
      Else If(Event Player.ai_AbilityButton == Button(Ability 1));
         Press Button(Event Player, Button(Ability 1));
      Else If(Event Player.ai_AbilityButton == Button(Ability 2));
         Event Player.ai_LookAtVector = Position Of(Event Player) + World Vector Of(Vector(0, 0, 4), Event Player, Rotation);
         Call Subroutine(aiSub_FacingLookAt);
         Press Button(Event Player, Button(Ability 2));
         Call Subroutine(aiSub_ReactionDelay);
         Event Player.ai_CnAim = True;
      Else If(Event Player.ai_AbilityButton == Button(Ultimate));
         Press Button(Event Player, Button(Ultimate));
      End;
      Event Player.ai_IsInAbilitySub = False;
   }
}

rule("AI Orisa General")
{
   event
   {
      Ongoing - Each Player;
      Team 2;
      Orisa;
   }

   conditions
   {
      Is Game In Progress == True;
      Is Alive(Event Player) == True;
      Event Player.ai_AIEnabled == True;
   }

   actions
   {
      Event Player.ai_OptimalDistanceDefault = Random Real(15, 20);
      Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
      Event Player.ai_AimBaseDefault = 0;
      Event Player.ai_AimBase = Event Player.ai_AimBaseDefault;
      Event Player.ai_AimType = 1;
      Event Player.ai_ProjectileSpeeds[0] = 120;
      Event Player.ai_ProjectileSpeeds[1] = 25;
      Event Player.ai_HeroInitialized = True;
   }
}

rule("AI Orisa Attack")
{
   event
   {
      Ongoing - Each Player;
      Team 2;
      Orisa;
   }

   conditions
   {
      Event Player.ai_AIEnabled == True;
      Event Player.ai_CnAttack == True;
      Is Alive(Event Player) == True;
      Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
      Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
      Event Player.ai_RetCastDistance < 3;
   }

   actions
   {
      Skip If(Is Button Held(Event Player, Button(Primary Fire)), 2);
      Call Subroutine(aiSub_ButtonsReset);
      Start Holding Button(Event Player, Button(Primary Fire));
      Wait(0.250, Ignore Condition);
      Loop If Condition Is True;
      Stop Holding Button(Event Player, Button(Primary Fire));
   }
}

rule("AI Orisa Halt!")
{
   event
   {
      Ongoing - Each Player;
      Team 2;
      Orisa;
   }

   conditions
   {
      Event Player.ai_AIEnabled == True;
      Event Player.ai_CnUseAbilities == True;
      Event Player.ai_IsInAbilitySub == False;
      Is Alive(Event Player) == True;
      Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
      Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
      Event Player.ai_RetCastDistance < 3;
      Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
   }

   actions
   {
      Event Player.ai_AbilityButton = Button(Secondary Fire);
      Call Subroutine(aiSub_Abilities_Orisa);
   }
}

rule("AI Orisa Fortify")
{
   event
   {
      Player Took Damage;
      Team 2;
      Orisa;
   }

   conditions
   {
      Event Player.ai_AIEnabled == True;
      Event Player.ai_CnUseAbilities == True;
      Event Player.ai_IsInAbilitySub == False;
      Is Alive(Event Player) == True;
      Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
      Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
      Ability Cooldown(Event Player, Button(Ability 1)) == 0;
   }

   actions
   {
      If(Random Real(0, 1) < 0.333 + Event Player.ai_ChanceMod);
         Event Player.ai_AbilityButton = Button(Ability 1);
         Call Subroutine(aiSub_Abilities_Orisa);
      End;
   }
}

rule("AI Orisa Protective Barrier")
{
   event
   {
      Ongoing - Each Player;
      Team 2;
      Orisa;
   }

   conditions
   {
      Event Player.ai_AIEnabled == True;
      Event Player.ai_CnUseAbilities == True;
      Event Player.ai_IsInAbilitySub == False;
      Is Alive(Event Player) == True;
      Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
      Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Event Player.ai_OptimalDistance;
      Absolute Value(
         Horizontal Angle Towards(
            Event Player,
            Players In Slot(Slot Of(Event Player), Team 1)
         )
      ) 
         <= 12;

      Ability Cooldown(Event Player, Button(Ability 2)) == 0;
      Is Using Ability 2(Event Player) == False;
   }

   actions
   {
      Event Player.ai_AbilityButton = Button(Ability 2);
      Call Subroutine(aiSub_Abilities_Orisa);
   }
}

rule("AI Orisa Supercharger")
{
   event
   {
      Ongoing - Each Player;
      Team 2;
      Orisa;
   }

   conditions
   {
      Event Player.ai_AIEnabled == True;
      Event Player.ai_CnUseAbilities == True;
      Event Player.ai_IsInAbilitySub == False;
      Is Alive(Event Player) == True;
      Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
      Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Event Player.ai_OptimalDistance;
      Ultimate Charge Percent(Event Player) == 100;
      Is Using Ultimate(Event Player) == False;
   }

   actions
   {
      Event Player.ai_AbilityButton = Button(Ultimate);
      Call Subroutine(aiSub_Abilities_Orisa);
   }
}


rule("AI Moira")
{
	event
	{
		Subroutine;
		aiSub_Abilities_Moira;
	}

	actions
	{
		Event Player.ai_IsInAbilitySub = True;
		Call Subroutine(aiSub_ReactionDelay);
		If(Event Player.ai_AbilityButton == Button(Primary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Secondary Fire));
			Skip If(Is Button Held(Event Player, Button(Secondary Fire)), 1);
			Start Holding Button(Event Player, Button(Secondary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Ability 1));
			If(Event Player.ai_AbilityOpt == 0);
				Press Button(Event Player, Button(Jump));
				Wait(Random Real(0.150, 0.250), Ignore Condition);
				Press Button(Event Player, Button(Ability 1));
				Wait(Random Real(0.500, 0.600), Ignore Condition);
				Press Button(Event Player, Button(Jump));
			Else If(Event Player.ai_AbilityOpt == 1);
				Press Button(Event Player, Button(Ability 1));
			End;
		Else If(Event Player.ai_AbilityButton == Button(Ability 2));
			Stop Holding Button(Event Player, Button(Secondary Fire));
			Call Subroutine(aiSub_ReactionDelay);
			Press Button(Event Player, Button(Ability 2));
			Call Subroutine(aiSub_ReactionDelay);
			If(Event Player.ai_AbilityOpt == 0);
				Press Button(Event Player, Button(Primary Fire));
			Else If(Event Player.ai_AbilityOpt == 1);
				Press Button(Event Player, Button(Secondary Fire));
			End;
		Else If(Event Player.ai_AbilityButton == Button(Ultimate));
			If(Ability Cooldown(Event Player, Button(Ability 2)) == 0);
				Event Player.ai_AbilityButton = Button(Ability 2);
				Event Player.ai_AbilityOpt = 1;
				Call Subroutine(aiSub_Abilities_Moira);
			End;
			Press Button(Event Player, Button(Ultimate));
			Wait Until(Is Using Ultimate(Event Player), 1 / 60);
			Wait Until(Is Using Ultimate(Event Player) == False, 8);
		End;
		Event Player.ai_IsInAbilitySub = False;
	}
}

rule("AI Moira General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.ai_AIEnabled == True;
	}

	actions
	{
		Event Player.ai_OptimalDistanceDefault = Random Real(10, 15);
		Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
		Event Player.ai_AimBaseDefault = 0;
		Event Player.ai_AimTypeDefault = 0;
		Call Subroutine(aiSub_FacingReset);
		Event Player.ai_HeroInitialized = True;
	}
}

rule("AI Moira Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Event Player.ai_RetCastDistance < 2;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Secondary Fire);
		Call Subroutine(aiSub_Abilities_Moira);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("AI Moira Fade")
{
	event
	{
		Player Took Damage;
		Team 2;
		Moira;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Event Player) <= 75;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 1);
		Event Player.ai_AbilityOpt = 0;
		Call Subroutine(aiSub_Abilities_Moira);
	}
}

rule("AI Moira Fade Gap Closer")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 25;
		Distance Between(Players In Slot(Slot Of(Event Player), Team 1), Players In Slot(Slot Of(Event Player), Team 1).p_HomeVector)
			< Global.c_BubbleRadius;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 1);
		Event Player.ai_AbilityOpt = 0;
		Call Subroutine(aiSub_Abilities_Moira);
	}
}

rule("AI Moira Fade Ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Using Ultimate(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
	}

	actions
	{
		If(Random Real(0, 1) < 0.500 + Event Player.ai_ChanceMod);
			Event Player.ai_AbilityButton = Button(Ability 1);
			Event Player.ai_AbilityOpt = 1;
			Call Subroutine(aiSub_Abilities_Moira);
		End;
	}
}

rule("AI Moira Biotic Orb Damage")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Event Player.ai_RetCastDistance < 2.75;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Ultimate Charge Percent(Event Player) < 80;
		Health(Event Player) >= 100;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) > 75;
		Is Using Ability 1(Event Player) == False;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 2);
		Event Player.ai_AbilityOpt = 1;
		Call Subroutine(aiSub_Abilities_Moira);
	}
}

rule("AI Moira Biotic Orb Healing")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Health(Event Player) <= 100;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 2);
		Event Player.ai_AbilityOpt = 0;
		Call Subroutine(aiSub_Abilities_Moira);
	}
}

rule("AI Moira Coalescence")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Ultimate Charge Percent(Event Player) == 100;
		Is Using Ultimate(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Event Player.ai_RetCastDistance < 2;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ultimate);
		Call Subroutine(aiSub_Abilities_Moira);
	}
}


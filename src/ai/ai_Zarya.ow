rule("AI Zarya")
{
   event
   {
      Subroutine;
      aiSub_Abilities_Zarya;
   }

   actions
   {
      Event Player.ai_IsInAbilitySub = True;
      Call Subroutine(aiSub_ReactionDelay);
      If(Event Player.ai_AbilityButton == Button(Primary Fire));
         If(Event Player.ai_AimType != 0 || Event Player.ai_AimBase != 0);
            Call Subroutine(aiSub_FacingReset);
         End;
         Skip If(Is Button Held(Event Player, Button(Primary Fire)), 2);
         Call Subroutine(aiSub_ButtonsReset);
         Start Holding Button(Event Player, Button(Primary Fire));
      Else If(Event Player.ai_AbilityButton == Button(Secondary Fire));
         If(Event Player.ai_AimType != 2 || Event Player.ai_AimBase != 2);
            Event Player.ai_AimType = 2;
            Event Player.ai_AimBase = 2;
            Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[1];
            Call Subroutine(aiSub_FacingStart);
         End;
         Skip If(Is Button Held(Event Player, Button(Secondary Fire)), 2);
         Call Subroutine(aiSub_ButtonsReset);
         Start Holding Button(Event Player, Button(Secondary Fire));
      Else If(Event Player.ai_AbilityButton == Button(Ability 1));
         Press Button(Event Player, Button(Ability 1));
      Else If(Event Player.ai_AbilityButton == Button(Ability 2));
      Else If(Event Player.ai_AbilityButton == Button(Ultimate));
         Event Player.ai_AimType = 2;
         Event Player.ai_AimBase = 2;
         Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[4];
         Call Subroutine(aiSub_FacingStart);
         Call Subroutine(aiSub_ReactionDelay);
         Press Button(Event Player, Button(Ultimate));
         Wait(0.150, Ignore Condition);
         Call Subroutine(aiSub_FacingReset);
      End;
      Event Player.ai_IsInAbilitySub = False;
   }
}

rule("AI Zarya General")
{
   event
   {
      Ongoing - Each Player;
      Team 2;
      Zarya;
   }

   conditions
   {
      Is Game In Progress == True;
      Is Alive(Event Player) == True;
      Event Player.ai_AIEnabled == True;
   }

   actions
   {
      Event Player.ai_OptimalDistanceDefault = Random Real(5, 10);
      Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
      Event Player.ai_AimBaseDefault = 0;
      Event Player.ai_AimTypeDefault = 0;
      Event Player.ai_ProjectileSpeeds[1] = 25;
      Event Player.ai_ProjectileSpeeds[4] = 25;
      Call Subroutine(aiSub_FacingReset);
      Event Player.ai_HeroInitialized = True;
   }
}

rule("AI Zarya Attack Primary")
{
   event
   {
      Ongoing - Each Player;
      Team 2;
      Zarya;
   }

   conditions
   {
      Event Player.ai_AIEnabled == True;
      Event Player.ai_CnAttack == True;
      Event Player.ai_IsInAbilitySub == False;
      Is Alive(Event Player) == True;
      Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
      Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
      Event Player.ai_RetCastDistance < 2.5;
   }

   actions
   {
      Event Player.ai_AbilityButton = Button(Primary Fire);
      Call Subroutine(aiSub_Abilities_Zarya);
      Wait(0.250, Ignore Condition);
      Loop If Condition Is True;
      Stop Holding Button(Event Player, Button(Primary Fire));
   }
}

rule("AI Zarya Attack Secondary")
{
   event
   {
      Ongoing - Each Player;
      Team 2;
      Zarya;
   }

   conditions
   {
      Event Player.ai_AIEnabled == True;
      Event Player.ai_CnAttack == True;
      Event Player.ai_IsInAbilitySub == False;
      Is Alive(Event Player) == True;
      Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
      Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 15;
      Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
      Event Player.ai_RetCastDistance < 3.25;
   }

   actions
   {
      Event Player.ai_AbilityButton = Button(Secondary Fire);
      Call Subroutine(aiSub_Abilities_Zarya);
      Wait(1, Ignore Condition);
      Loop If Condition Is True;
      Stop Holding Button(Event Player, Button(Secondary Fire));
   }
}

rule("AI Zarya Use Bubble")
{
   event
   {
      Ongoing - Each Player;
      Team 2;
      Zarya;
   }

   conditions
   {
      Event Player.ai_AIEnabled == True;
      Event Player.ai_CnUseAbilities == True;
      Event Player.ai_IsInAbilitySub == False;
      Is Alive(Event Player) == True;
      Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
      Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Eye Position(Event Player) - Vector(0, 0.250 + Y Component Of(
         Eye Position(Players In Slot(Slot Of(Event Player), Team 1))), 0), 12) == True;
      Ability Cooldown(Event Player, Button(Ability 1)) == 0;
      Is Using Ability 1(Event Player) == False;
   }

   actions
   {
      If(Random Real(0, 1) < 0.300 + Event Player.ai_ChanceMod);
         Event Player.ai_AbilityButton = Button(Ability 1);
         Call Subroutine(aiSub_Abilities_Zarya);
      End;
   }
}

rule("AI Zarya Graviton Surge")
{
   event
   {
      Ongoing - Each Player;
      Team 2;
      Zarya;
   }

   conditions
   {
      Event Player.ai_AIEnabled == True;
      Event Player.ai_CnUseAbilities == True;
      Event Player.ai_IsInAbilitySub == False;
      Is Alive(Event Player) == True;
      Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
      Ultimate Charge Percent(Event Player) == 100;
      Is Using Ultimate(Event Player) == False;
      Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
      Event Player.ai_RetCastDistance < 2.5;
      Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
   }

   actions
   {
      Event Player.ai_AbilityButton = Button(Ultimate);
      Call Subroutine(aiSub_Abilities_Zarya);
   }
}


rule("AI Sombra")
{
  event
  {
    Subroutine;
    aiSub_Abilities_Sombra;
  }

  actions
  {
    Event Player.ai_IsInAbilitySub = True;
    Call Subroutine(aiSub_ReactionDelay);
    If(Event Player.ai_AbilityButton == Button(Primary Fire));
      Skip If(Is Button Held(Event Player, Button(Primary Fire)), 2);
      Call Subroutine(aiSub_ButtonsReset);
      Start Holding Button(Event Player, Button(Primary Fire));
    Else If(Event Player.ai_AbilityButton == Button(Secondary Fire));
      If(Is Using Ability 1(Event Player) == True);
        Press Button(Event Player, Button(Ability 1));
        Wait(0.800, Ignore Condition);
      End;
      Start Holding Button(Event Player, Button(Secondary Fire));
      Wait(0.750, Ignore Condition);
      Stop Holding Button(Event Player, Button(Secondary Fire));
    Else If(Event Player.ai_AbilityButton == Button(Ability 1));
    Else If(Event Player.ai_AbilityButton == Button(Ability 2));
      If(Is Using Ability 2(Event Player));
        If(Ability Cooldown(Event Player, Button(Ability 1)) == 0);
          Press Button(Event Player, Button(Ability 1));
          Wait(1 / 60, Ignore Condition);
        End;
        Press Button(Event Player, Button(Ability 2));
        Wait(0.250, Ignore Condition);
        Heal(Event Player, Null, 75);
      Else;
        Event Player.ai_LookAtVector = Position Of(Event Player) + World Vector Of(Vector(Random Real(-5, 5), Random Real(1, 3),
          Random Real(-10, -15)), Event Player, Rotation);
        Call Subroutine(aiSub_FacingLookAt);
        Press Button(Event Player, Button(Ability 2));
        Wait(0.100, Ignore Condition);
        Event Player.ai_CnAim = True;
      End;
    Else If(Event Player.ai_AbilityButton == Button(Ultimate));
      Press Button(Event Player, Button(Ultimate));
      Wait(0.100, Ignore Condition);
      Wait Until(Is Using Ultimate(Event Player) == False, 0.650);
    End;
    Event Player.ai_IsInAbilitySub = False;
  }
}

rule("AI Sombra General")
{
  event
  {
    Ongoing - Each Player;
    Team 2;
    Sombra;
  }

  conditions
  {
    Is Game In Progress == True;
    Is Alive(Event Player) == True;
    Event Player.ai_AIEnabled == True;
  }

  actions
  {
    Event Player.ai_OptimalDistanceDefault = Random Real(5, 8);
    Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
    Event Player.ai_AimBaseDefault = 0;
    Event Player.ai_AimBase = Event Player.ai_AimBaseDefault;
    Event Player.ai_AimType = 0;
    If(Ability Cooldown(Event Player, Button(Ability 1)) == 0);
      Press Button(Event Player, Button(Ability 1));
    End;
    Event Player.ai_HeroInitialized = True;
  }
}

rule("AI Sombra Attack")
{
  event
  {
    Ongoing - Each Player;
    Team 2;
    Sombra;
  }

  conditions
  {
    Event Player.ai_AIEnabled == True;
    Event Player.ai_CnAttack == True;
    Event Player.ai_IsInAbilitySub == False;
    Is Alive(Event Player) == True;
    Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
    Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 30;
    Event Player.ai_RetCastDistance < 2.5;
    Is Using Ability 1(Event Player) == False;
    Is Button Held(Event Player, Button(Secondary Fire)) == False;
  }

  actions
  {
    Event Player.ai_AbilityButton = Button(Primary Fire);
    Call Subroutine(aiSub_Abilities_Sombra);
    Wait(0.250, Ignore Condition);
    Loop If Condition Is True;
    Stop Holding Button(Event Player, Button(Primary Fire));
  }
}

rule("AI Sombra Hack")
{
  event
  {
    Ongoing - Each Player;
    Team 2;
    Sombra;
  }

  conditions
  {
    Event Player.ai_AIEnabled == True;
    Event Player.ai_CnUseAbilities == True;
    Event Player.ai_IsInAbilitySub == False;
    Is Alive(Event Player) == True;
    Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
    Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
    Event Player.ai_RetCastDistance < 1.5;
    Is In View Angle(Players In Slot(Slot Of(Event Player), Team 1), Eye Position(Event Player) - Vector(0, 0.250 + Y Component Of(
      Eye Position(Players In Slot(Slot Of(Event Player), Team 1))), 0), 15) == False;
    Ability Cooldown(Event Player, Button(Secondary Fire)) == 0;
  }

  actions
  {
    Event Player.ai_AbilityButton = Button(Secondary Fire);
    Call Subroutine(aiSub_Abilities_Sombra);
  }
}

rule("AI Sombra Stealth")
{
  event
  {
    Player Dealt Final Blow;
    Team 2;
    Sombra;
  }

  conditions
  {
    Event Player.ai_AIEnabled == True;
    Event Player.ai_CnUseAbilities == True;
    Event Player.ai_IsInAbilitySub == False;
    Is Alive(Event Player) == True;
    Ability Cooldown(Event Player, Button(Ability 1)) == 0;
    Is Using Ability 1(Event Player) == False;
  }

  actions
  {
    Call Subroutine(aiSub_ReactionDelay);
    Press Button(Event Player, Button(Ability 1));
  }
}

rule("AI Sombra Translocator Place")
{
  event
  {
    Ongoing - Each Player;
    Team 2;
    Sombra;
  }

  conditions
  {
    Event Player.ai_AIEnabled == True;
    Event Player.ai_CnUseAbilities == True;
    Event Player.ai_IsInAbilitySub == False;
    Is Alive(Event Player) == True;
    Is Using Ability 2(Event Player) == False;
    Is Firing Secondary(Event Player) == False;
    Ability Cooldown(Event Player, Button(Ability 2)) == 0;
  }

  actions
  {
    Event Player.ai_AbilityButton = Button(Ability 2);
    Call Subroutine(aiSub_Abilities_Sombra);
  }
}

rule("AI Sombra Translocator Use")
{
  event
  {
    Ongoing - Each Player;
    Team 2;
    Sombra;
  }

  conditions
  {
    Event Player.ai_AIEnabled == True;
    Event Player.ai_CnUseAbilities == True;
    Event Player.ai_IsInAbilitySub == False;
    Is Alive(Event Player) == True;
    Health(Event Player) <= 75;
    Is Using Ability 1(Event Player) == False;
    Is Using Ability 2(Event Player) == True;
    Ability Cooldown(Event Player, Button(Ability 2)) == 0;
  }

  actions
  {
    Event Player.ai_AbilityButton = Button(Ability 2);
    Call Subroutine(aiSub_Abilities_Sombra);
  }
}

rule("AI Sombra EMP")
{
  event
  {
    Ongoing - Each Player;
    Team 2;
    Sombra;
  }

  conditions
  {
    Event Player.ai_AIEnabled == True;
    Event Player.ai_CnUseAbilities == True;
    Event Player.ai_IsInAbilitySub == False;
    Is Alive(Event Player) == True;
    Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
    Ultimate Charge Percent(Event Player) == 100;
    Is Using Ultimate(Event Player) == False;
    Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 75;
    Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
  }

  actions
  {
    Event Player.ai_AbilityButton = Button(Ultimate);
    Call Subroutine(aiSub_Abilities_Sombra);
  }
}


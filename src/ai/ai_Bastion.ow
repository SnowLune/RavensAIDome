rule("AI Bastion")
{
	event
	{
		Subroutine;
		aiSub_Abilities_Bastion;
	}

	actions
	{
		Event Player.ai_IsInAbilitySub = True;
		Call Subroutine(aiSub_ReactionDelay);
		If(Event Player.ai_AbilityButton == Button(Primary Fire));
			Skip If(Is Button Held(Event Player, Button(Primary Fire)), 2);
			Call Subroutine(aiSub_ButtonsReset);
			Start Holding Button(Event Player, Button(Primary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Secondary Fire));
			Start Holding Button(Event Player, Button(Secondary Fire));
			Wait((Max Health(Event Player) - Health(Event Player)) / 75, Ignore Condition);
			Stop Holding Button(Event Player, Button(Secondary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Ability 1));
			Press Button(Event Player, Button(Ability 1));
		Else If(Event Player.ai_AbilityButton == Button(Ability 2));
		Else If(Event Player.ai_AbilityButton == Button(Ultimate));
			Event Player.ai_AimType = 1;
			Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[4];
			Press Button(Event Player, Button(Ultimate));
			Event Player.ai_AimBase = 2;
			Wait(0.250, Ignore Condition);
		End;
		Event Player.ai_IsInAbilitySub = False;
	}
}

rule("AI Bastion General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.ai_AIEnabled == True;
	}

	actions
	{
		Event Player.ai_OptimalDistanceDefault = Random Real(18, 22);
		Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
		Event Player.ai_AimBaseDefault = 0;
		Event Player.ai_AimBase = Event Player.ai_AimBaseDefault;
		Event Player.ai_AimType = 0;
		Event Player.ai_ProjectileSpeeds[4] = 60;
		Event Player.ai_HeroInitialized = True;
	}
}

rule("AI Bastion Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 40;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15 + Event Player.ai_ViewAngleMod) == True;
		Is Using Ability 1(Event Player) == False;
		Is Firing Secondary(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Primary Fire);
		Call Subroutine(aiSub_Abilities_Bastion);
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("AI Bastion Reconfigure")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Event Player.ai_OptimalDistance;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15 + Event Player.ai_ViewAngleMod) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Using Ability 1(Event Player) == False;
		Is Moving(Event Player) == True;
	}

	actions
	{
		If(Random Real(0, 1) < 0.350 + Event Player.ai_ChanceMod);
			Event Player.ai_AbilityButton = Button(Ability 1);
			Call Subroutine(aiSub_Abilities_Bastion);
		End;
	}
}

rule("AI Bastion Self-Repair")
{
	event
	{
		Player Took Damage;
		Team 2;
		Bastion;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Health(Event Player) <= Max Health(Event Player) / 2;
		Is Firing Secondary(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Secondary Fire);
		Call Subroutine(aiSub_Abilities_Bastion);
	}
}

rule("AI Bastion Configuration: Tank")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Using Ultimate(Event Player) == False;
		Health(Event Player) >= 100;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ultimate);
		Call Subroutine(aiSub_Abilities_Bastion);
		Wait Until(Is Using Ultimate(Event Player) == False, 8);
		Event Player.ai_AimType = 0;
		Event Player.ai_AimBase = 0;
	}
}


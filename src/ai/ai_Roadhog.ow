rule("AI Roadhog")
{
	event
	{
		Subroutine;
		aiSub_Abilities_Roadhog;
	}

	actions
	{
		Event Player.ai_IsInAbilitySub = True;
		Call Subroutine(aiSub_ReactionDelay);
		If(Event Player.ai_AbilityButton == Button(Primary Fire));
			Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[0];
			Skip If(Is Button Held(Event Player, Button(Primary Fire)), 2);
			Call Subroutine(aiSub_ButtonsReset);
			Start Holding Button(Event Player, Button(Primary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Secondary Fire));
			Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[0];
			Skip If(Is Button Held(Event Player, Button(Secondary Fire)), 2);
			Call Subroutine(aiSub_ButtonsReset);
			Start Holding Button(Event Player, Button(Secondary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Ability 1));
			Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[2];
			Wait(Random Real(0.100, 0.250), Ignore Condition);
			Event Player.bot_MoveWASDEnabled = False;
			Start Throttle In Direction(Event Player, Forward, 1, To Player, Replace existing throttle, None);
			Press Button(Event Player, Button(Ability 1));
			Wait Until(Is Using Ability 1(Event Player), 1);
			Wait Until(Is Using Ability 1(Event Player) == False, 1);
			Start Holding Button(Event Player, Button(Primary Fire));
			Wait(0.250, Ignore Condition);
			Press Button(Event Player, Button(Melee));
			Wait(0.750, Ignore Condition);
			Stop Holding Button(Event Player, Button(Primary Fire));
			Call Subroutine(botSub_ThrottleStop);
			Event Player.bot_MoveWASDEnabled = True;
		Else If(Event Player.ai_AbilityButton == Button(Ability 2));
			Press Button(Event Player, Button(Ability 2));
		Else If(Event Player.ai_AbilityButton == Button(Ultimate));
			Press Button(Event Player, Button(Ultimate));
		End;
		Event Player.ai_IsInAbilitySub = False;
	}
}

rule("AI Roadhog General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.ai_AIEnabled == True;
	}

	actions
	{
		Event Player.ai_OptimalDistanceDefault = Random Real(9, 12);
		Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
		Event Player.ai_AimBaseDefault = 0;
		Event Player.ai_AimBase = Event Player.ai_AimBaseDefault;
		Event Player.ai_AimType = 1;
		Event Player.ai_ProjectileSpeeds[0] = 80;
		Event Player.ai_ProjectileSpeeds[2] = 40;
		Event Player.ai_HeroInitialized = True;
	}
}

rule("AI Roadhog Attack Primary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20 + Event Player.ai_ViewAngleMod) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Is Using Ultimate(Event Player) == False;
		Is Firing Secondary(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Primary Fire);
		Call Subroutine(aiSub_Abilities_Roadhog);
		Wait(0.850, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("AI Roadhog Attack Secondary")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) > 15;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 38;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20 + Event Player.ai_ViewAngleMod) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Is Using Ultimate(Event Player) == False;
		Is Firing Primary(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Secondary Fire);
		Call Subroutine(aiSub_Abilities_Roadhog);
		Wait(0.850, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("AI Roadhog Chain Hook")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Ammo(Event Player, 0) > 1;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 75;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 4 + Event Player.ai_ViewAngleMod) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1).p_HomeVector) <= Players In Slot(Slot Of(
			Event Player), Team 1).p_ZoneRadius;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 1);
		Call Subroutine(aiSub_Abilities_Roadhog);
	}
}

rule("AI Roadhog Take A Breather")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Health(Event Player) < 100;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 2);
		Call Subroutine(aiSub_Abilities_Roadhog);
	}
}

rule("AI Roadhog Whole Hog")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Using Ultimate(Event Player) == False;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 15;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 20 + Event Player.ai_ViewAngleMod) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ultimate);
		Call Subroutine(aiSub_Abilities_Roadhog);
	}
}


rule("AI Widowmaker")
{
	event
	{
		Subroutine;
		aiSub_Abilities_Widowmaker;
	}

	actions
	{
		Event Player.ai_IsInAbilitySub = True;
		Call Subroutine(aiSub_ReactionDelay);
		If(Event Player.ai_AbilityButton == Button(Primary Fire));
			If(Is Firing Secondary(Event Player));
				If(Random Real(0, 1) < Players In Slot(Slot Of(Event Player), Team 1).p_Difficulty / 20);
					Call Subroutine(aiSub_FlickIn);
					Press Button(Event Player, Button(Primary Fire));
					Call Subroutine(aiSub_FlickOut);
				Else;
					Press Button(Event Player, Button(Primary Fire));
				End;
				Event Player.ai_WeaponChargeTime = Total Time Elapsed;
			Else;
				Skip If(Is Button Held(Event Player, Button(Primary Fire)), 2);
				Call Subroutine(aiSub_ButtonsReset);
				Start Holding Button(Event Player, Button(Primary Fire));
			End;
		Else If(Event Player.ai_AbilityButton == Button(Secondary Fire));
			If(Is Button Held(Event Player, Button(Secondary Fire)));
				Stop Holding Button(Event Player, Button(Secondary Fire));
				If(Event Player.ai_AimType != 0 || Event Player.ai_AimBase != 0);
					Event Player.ai_AimType = 0;
					Event Player.ai_AimBase = 0;
					Call Subroutine(aiSub_FacingStart);
				End;
			Else;
				Event Player.bot_MoveJumpEnabled = False;
				Call Subroutine(aiSub_ButtonsReset);
				Start Holding Button(Event Player, Button(Secondary Fire));
				Wait(0.333, Ignore Condition);
				Event Player.ai_WeaponChargeTime = Total Time Elapsed;
				If(Event Player.ai_AimType != 0 || Event Player.ai_AimBase != 1);
					Call Subroutine(aiSub_FacingReset);
				End;
			End;
		Else If(Event Player.ai_AbilityButton == Button(Ability 1));
			Event Player.ai_CnAttack = False;
			Call Subroutine(aiSub_ButtonsReset);
			Call Subroutine(aiSub_FacingLookAt);
			Press Button(Event Player, Button(Ability 1));
			Stop Facing(Event Player);
			Wait Until(Is Using Ability 1(Event Player) == True, 2);
			Wait Until(Is Using Ability 1(Event Player) == False, 2);
			Event Player.ai_CnAim = True;
			Event Player.ai_CnAttack = True;
		Else If(Event Player.ai_AbilityButton == Button(Ability 2));
			Stop Holding Button(Event Player, Button(Secondary Fire));
			Event Player.ai_AimType = 2;
			Event Player.ai_AimBase = 2;
			Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[3];
			Call Subroutine(aiSub_FacingStart);
			Call Subroutine(aiSub_ReactionDelay);
			Press Button(Event Player, Button(Ability 2));
			Wait(0.150, Ignore Condition);
			Call Subroutine(aiSub_FacingReset);
		Else If(Event Player.ai_AbilityButton == Button(Ultimate));
			Stop Holding Button(Event Player, Button(Secondary Fire));
			Press Button(Event Player, Button(Ultimate));
		End;
		Event Player.ai_IsInAbilitySub = False;
	}
}

rule("AI Widowmaker General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.ai_AIEnabled == True;
	}

	actions
	{
		Event Player.ai_OptimalDistanceDefault = Random Integer(20, 35);
		Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
		Event Player.ai_StrafeDistanceMod = 10;
		Event Player.ai_AimBaseDefault = 1;
		Event Player.ai_AimTypeDefault = 0;
		Event Player.ai_ProjectileSpeeds[3] = 20;
		Event Player.ai_AimDistanceMod = -10;
		Call Subroutine(aiSub_FacingReset);
		Event Player.ai_HeroInitialized = True;
	}
}

rule("AI Widowmaker Scope In")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 7.500;
		Distance Between(Players In Slot(Slot Of(Event Player), Team 1), Players In Slot(Slot Of(Event Player), Team 1).p_HomeVector)
			< Global.c_BubbleRadius;
		Is Using Ability 1(Event Player) == False;
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
		Is Reloading(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Secondary Fire);
		Call Subroutine(aiSub_Abilities_Widowmaker);
	}
}

rule("AI Widowmaker Scope Out")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 7.500 || Is Alive(Players In Slot(Slot Of(
			Event Player), Team 1)) == False) == True;
		Is Using Ability 1(Event Player) == False;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Secondary Fire);
		Call Subroutine(aiSub_Abilities_Widowmaker);
	}
}

rule("AI Widowmaker Scope Out Reloading")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Using Ability 1(Event Player) == False;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Reloading(Event Player) == True;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Secondary Fire);
		Call Subroutine(aiSub_Abilities_Widowmaker);
	}
}

rule("AI Widowmaker Charge And Fire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Firing Secondary(Event Player) == True;
		Players in View Angle(Event Player, Team 1, 1.250 + Event Player.ai_ViewAngleMod) == Players In Slot(Slot Of(Event Player),
			Team 1);
		Is Using Ability 1(Event Player) == False;
		Total Time Elapsed >= Event Player.ai_WeaponChargeTime + 1.250;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Primary Fire);
		Call Subroutine(aiSub_Abilities_Widowmaker);
	}
}

rule("AI Widowmaker Attack SMG")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) < 7.500;
		Is In View Angle(Event Player, Players In Slot(Slot Of(Event Player), Team 1), 15 + Event Player.ai_ViewAngleMod) == True;
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Primary Fire);
		Call Subroutine(aiSub_Abilities_Widowmaker);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("AI Widowmaker Grappling Hook Closer")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Using Ability 1(Event Player) == False;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= Event Player.ai_OptimalDistance + 10;
		Distance Between(Players In Slot(Slot Of(Event Player), Team 1), Players In Slot(Slot Of(Event Player), Team 1).p_HomeVector)
			< Global.c_BubbleRadius;
	}

	actions
	{
		Event Player.ai_LookAtVector = Position Of(Event Player) + World Vector Of(Vector(Random Real(-8, 8), 0, Random Real(8, 16)),
			Event Player, Rotation);
		Event Player.ai_AbilityButton = Button(Ability 1);
		Call Subroutine(aiSub_Abilities_Widowmaker);
	}
}

rule("AI Widowmaker Grappling Hook Farther")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Using Ability 1(Event Player) == False;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Event Player.ai_OptimalDistance - 10;
		Distance Between(Players In Slot(Slot Of(Event Player), Team 1), Players In Slot(Slot Of(Event Player), Team 1).p_HomeVector)
			< Global.c_BubbleRadius;
	}

	actions
	{
		Event Player.ai_LookAtVector = Position Of(Event Player) + World Vector Of(Vector(Random Real(-8, 8), 0, Random Real(-8, -16)),
			Event Player, Rotation);
		Event Player.ai_AbilityButton = Button(Ability 1);
		Call Subroutine(aiSub_Abilities_Widowmaker);
	}
}

rule("AI Widowmaker Venom Mine")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Event Player.ai_OptimalDistance;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 2);
		Call Subroutine(aiSub_Abilities_Widowmaker);
	}
}

rule("AI Widowmaker Infra-Sight")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Widowmaker;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CnUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Using Ultimate(Event Player) == False;
		Health(Event Player) >= 75;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ultimate);
		Call Subroutine(aiSub_Abilities_Widowmaker);
	}
}


rule("AI Winston")
{
	event
	{
		Subroutine;
		aiSub_Abilities_Winston;
	}

	actions
	{
		Event Player.ai_IsInAbilitySub = True;
		Call Subroutine(aiSub_ReactionDelay);
		If(Event Player.ai_AbilityButton == Button(Primary Fire));
			Skip If(Is Button Held(Event Player, Button(Primary Fire)), 2);
			Call Subroutine(aiSub_ButtonsReset);
			Start Holding Button(Event Player, Button(Primary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Secondary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Ability 1));
			Event Player.bot_MoveWASDEnabled = False;
			Start Throttle In Direction(Event Player, Direction Towards(Event Player, Players In Slot(Slot Of(Event Player), Team 1)), 1,
				To World, Replace existing throttle, Direction and Magnitude);
			Event Player.ai_AimType = 2;
			Event Player.ai_AimBase = 2;
			Event Player.ai_ProjectileSpeed = Event Player.ai_ProjectileSpeeds[2];
			Call Subroutine(aiSub_FacingStart);
			Wait(Random Real(0.250, 0.750), Ignore Condition);
			Press Button(Event Player, Button(Ability 1));
			Wait(0.100, Ignore Condition);
			Event Player.bot_MoveWASDEnabled = True;
			Call Subroutine(aiSub_FacingReset);
		Else If(Event Player.ai_AbilityButton == Button(Ability 2));
			Press Button(Event Player, Button(Ability 2));
		Else If(Event Player.ai_AbilityButton == Button(Ultimate));
			Press Button(Event Player, Button(Ultimate));
			Event Player.ai_OptimalDistance = Random Real(1.500, 3);
			Wait Until(Is Using Ultimate(Event Player) == True, 0.250);
		End;
		Event Player.ai_IsInAbilitySub = False;
	}
}

rule("AI Winston General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.ai_AIEnabled == True;
	}

	actions
	{
		Event Player.ai_OptimalDistanceDefault = Random Real(3, 6);
		Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
		Event Player.ai_AimBaseDefault = 0;
		Event Player.ai_AimTypeDefault = 0;
		Event Player.ai_ProjectileSpeeds[2] = 30;
		Event Player.ai_StrafeDistanceMod = 1.500;
		Call Subroutine(aiSub_FacingReset);
		Event Player.ai_HeroInitialized = True;
	}
}

rule("AI Winston Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.250 + Y Component Of(
			Eye Position(Event Player)), 0), 30) == True;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Primary Fire);
		Call Subroutine(aiSub_Abilities_Winston);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("AI Winston Jump Pack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.250 + Y Component Of(
			Eye Position(Event Player)), 0), 12.500) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 12;
		Distance Between(Players In Slot(Slot Of(Event Player), Team 1), Players In Slot(Slot Of(Event Player), Team 1).p_HomeVector)
			< Global.playerBubbleRadius;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Using Ability 1(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 1);
		Call Subroutine(aiSub_Abilities_Winston);
	}
}

rule("AI Winston Barrier Projector")
{
	event
	{
		Player Took Damage;
		Team 2;
		Winston;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Health(Event Player) <= 350;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= Event Player.ai_OptimalDistance + 10;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		If(Random Real(0, 1) < 0.700 + Event Player.ai_ChanceMod);
			Event Player.ai_AbilityButton = Button(Ability 2);
			Call Subroutine(aiSub_Abilities_Winston);
		End;
	}
}

rule("AI Winston Primal Rage")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Event Player.ai_HeroInitialized == True;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Is Using Ultimate(Event Player) == False;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 20;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.250 + Y Component Of(
			Eye Position(Event Player)), 0), 15) == True;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ultimate);
		Call Subroutine(aiSub_Abilities_Winston);
		Wait Until(Is Using Ultimate(Event Player) == False, 10);
		Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
	}
}


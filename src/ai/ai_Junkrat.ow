rule("AI Junkrat")
{
	event
	{
		Subroutine;
		aiSub_Abilities_Junkrat;
	}

	actions
	{
		Event Player.ai_IsInAbilitySub = True;
		Call Subroutine(aiSub_ReactionDelay);
		If(Event Player.ai_AbilityButton == Button(Primary Fire));
			Skip If(Is Button Held(Event Player, Button(Primary Fire)), 1);
			Start Holding Button(Event Player, Button(Primary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Ability 1));
			Press Button(Event Player, Button(Ability 1));
			Wait(Random Real(0.450, 0.650), Ignore Condition);
			Press Button(Event Player, Button(Secondary Fire));
		Else If(Event Player.ai_AbilityButton == Button(Ability 2));
			Event Player.ai_LookAtVector = Position Of(Event Player) + World Vector Of(Vector(Random Real(-5, 5), 0, Random Real(0, 2)),
				Event Player, Rotation);
			Call Subroutine(aiSub_FacingLookAt);
			Press Button(Event Player, Button(Ability 2));
			Call Subroutine(aiSub_ReactionDelay);
			Event Player.ai_CanAim = True;
		Else If(Event Player.ai_AbilityButton == Button(Ultimate));
			Call Subroutine(aiSub_ButtonsReset);
			Press Button(Event Player, Button(Ultimate));
			Wait(1, Ignore Condition);
			If(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10);
				Press Button(Event Player, Button(Primary Fire));
			Else;
				Wait(Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) / 12, Ignore Condition);
				Press Button(Event Player, Button(Primary Fire));
			End;
		End;
		Event Player.ai_IsInAbilitySub = False;
	}
}

rule("AI Junkrat General")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.ai_AIEnabled == True;
	}

	actions
	{
		Event Player.ai_OptimalDistanceDefault = Random Real(9, 12);
		Event Player.ai_OptimalDistance = Event Player.ai_OptimalDistanceDefault;
		Event Player.ai_AimBaseDefault = 0;
		Event Player.ai_AimTypeDefault = 2;
		Event Player.ai_AimDistanceMod = 10;
		Event Player.ai_ProjectileSpeed = 25;
		Call Subroutine(aiSub_FacingReset);
		Event Player.ai_HeroInitialized = True;
	}
}

rule("AI Junkrat Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanAttack == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 50;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.250 + Y Component Of(
			Eye Position(Event Player)), 0), 20) == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Primary Fire);
		Call Subroutine(aiSub_Abilities_Junkrat);
		Wait(0.670, Ignore Condition);
		Loop If Condition Is True;
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("AI Junkrat Concussion Mine")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 10;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.250 + Y Component Of(
			Eye Position(Event Player)), 0), 15) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Ability Charge(Event Player, Button(Ability 1)) > 0;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 1);
		Call Subroutine(aiSub_Abilities_Junkrat);
	}
}

rule("AI Junkrat Steel Trap")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) <= 8;
		Is In View Angle(Event Player, Eye Position(Players In Slot(Slot Of(Event Player), Team 1)) - Vector(0, 0.250 + Y Component Of(
			Eye Position(Event Player)), 0), 17.500) == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ability 2);
		Call Subroutine(aiSub_Abilities_Junkrat);
	}
}

rule("AI Junkrat Riptire")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Event Player.ai_AIEnabled == True;
		Event Player.ai_CanUseAbilities == True;
		Event Player.ai_IsInAbilitySub == False;
		Ultimate Charge Percent(Event Player) == 100;
		Is Using Ultimate(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Alive(Players In Slot(Slot Of(Event Player), Team 1)) == True;
		Distance Between(Event Player, Players In Slot(Slot Of(Event Player), Team 1)) >= 10;
		Distance Between(Players In Slot(Slot Of(Event Player), Team 1), Players In Slot(Slot Of(Event Player), Team 1).p_HomeVector)
			< Global.playerBubbleRadius;
		Health(Players In Slot(Slot Of(Event Player), Team 1)) >= 100;
	}

	actions
	{
		Event Player.ai_AbilityButton = Button(Ultimate);
		Call Subroutine(aiSub_Abilities_Junkrat);
	}
}

